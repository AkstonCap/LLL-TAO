ifeq ($(OS),Windows_NT)
detected_OS:= Windows
else ifeq ($(shell uname -s),Darwin)
	detected_OS:= OSX
else
	detected_OS:= Linux
endif

#Configure for 32/64 Bit
ifndef 32BIT
	override 32BIT= 0
endif
ifeq (${32BIT}, 1)
	BUILD_ARCH=x86
	CXXFLAGS+= -m32
else
	BUILD_ARCH=x64
	CXXFLAGS+= -m64
endif


#Define default LIB and INCLUDE path variables
ifndef OPENSSL_LIB_PATH
	ifeq ($(detected_OS),Windows)
		OPENSSL_LIB_PATH= "C:\deps\lib"
	endif
	ifeq ($(detected_OS),OSX)
		OPENSSL_LIB_PATH= /usr/local/opt/openssl/lib
	endif
	ifeq ($(detected_OS),Linux)
		#Arch Linux Fix
		ifeq ($(shell uname -r | grep -o ....$), ARCH)
			OPENSSL_LIB_PATH= /usr/lib/openssl-1.0
		else
		OPENSSL_LIB_PATH= /usr/lib/x86_64-linux-gnu
		endif
	endif
endif
ifndef OPENSSL_INCLUDE_PATH
	ifeq ($(detected_OS),Windows)
		OPENSSL_INCLUDE_PATH= "C:\deps\include"
	endif
	ifeq ($(detected_OS),OSX)
		OPENSSL_INCLUDE_PATH= /usr/local/opt/openssl/include
	endif
	ifeq ($(detected_OS),Linux)
		#Arch Linux Fix
		ifeq ($(shell uname -r | grep -o ....$), ARCH)
			OPENSSL_INCLUDE_PATH= /usr/include/openssl-1.0
		else
			OPENSSL_INCLUDE_PATH= /usr/include/openssl
		endif
	endif
endif
ifndef BDB_LIB_PATH
	ifeq ($(detected_OS),Windows)
		BDB_LIB_PATH= "C:\deps\lib"
	endif
	ifeq ($(detected_OS),OSX)
		BDB_LIB_PATH= /usr/local/opt/db/lib
	endif
	ifeq ($(detected_OS),Linux)
		BDB_LIB_PATH= /usr/lib/x86_64-linux-gnu
	endif
endif
ifndef BDB_INCLUDE_PATH
	ifeq ($(detected_OS),Windows)
		BDB_INCLUDE_PATH= "C:\deps\include"
	endif
	ifeq ($(detected_OS),OSX)
		BDB_INCLUDE_PATH= /usr/local/opt/db/include
	endif
	ifeq ($(detected_OS),Linux)
		BDB_INCLUDE_PATH= /usr/include
	endif
endif

#Oracle DB Support Config
ifndef ORACLE
	override ORACLE= 0
endif
ifneq (${ORACLE}, 1)
	DEFS+= -DUSE_LLD
endif

#Configure Build Environment
ifneq ($(detected_OS),Windows)
INCLUDEPATHS+= $(addprefix -I, $(CURDIR) $(CURDIR)/build $(CURDIR)/src )\
	-I$(BDB_INCLUDE_PATH) \
	-I$(OPENSSL_INCLUDE_PATH)
endif
ifeq ($(detected_OS),Windows)
INCLUDEPATHS+= -I"$(CURDIR)" -I"$(CURDIR)/build" -I"$(CURDIR)/src" \
	-I$(BDB_INCLUDE_PATH) \
	-I$(OPENSSL_INCLUDE_PATH)
endif
LIBPATHS+= -L$(BDB_LIB_PATH) \
	-L$(OPENSSL_LIB_PATH)
ifneq ($(detected_OS),OSX)
LIBS+=-ldb_cxx \
	-lssl \
	-lcrypto
endif
DEFS+=  -D$(BUILD_ARCH)

#Display Warnings while compiling
ifdef ENABLE_WARNINGS
	CXXFLAGS+= -Wall -Wextra -Wno-sign-compare -Wno-invalid-offsetof -Wno-unused-parameter -Wformat -Wformat-security
else
	CXXFLAGS+= -w
endif

#Fail on warnings
ifdef WARNINGS_FAIL
	CXXFLAGS+= -Werror
endif

#Enable / Disable debug symbols and set appropriate optimization level
ifdef ENABLE_DEBUG
	DEBUG+=-g
	OPTIMIZATION+=-O0
else
	DEBUG+=-s
	OPTIMIZATION+=-O3
endif



#Source File List
HEADERS= $(wildcard *.h)
OBJS= \
	build/main.o \
	build/LLC_skein.o \
	build/LLC_skein_block.o \
	build/LLC_KeccakDuplex.o \
	build/LLC_KeccakSponge.o \
	build/LLC_Keccak-compact64.o \
	build/LLC_KeccakHash.o \
	build/LLC_random.o \
	build/LLC_key.o \
    build/LLC_bignum.o \
	build/LLP_netaddr.o \
	build/LLP_service.o \
	build/LLP_address.o \
	build/LLP_addressinfo.o \
	build/LLP_hosts.o \
	build/LLP_socket.o \
	build/LLP_inv.o\
	build/LLP_legacy.o \
	build/LLP_miner.o \
	build/LLP_tritium.o \
	build/LLP_corenode.o \
	build/LLP_rpcnode.o \
    build/LLP_manager.o \
    build/LLP_ddos.o \
	build/Ledger_block.o \
	build/Ledger_prime.o \
	build/Ledger_state.o \
	build/Ledger_supply.o \
	build/Ledger_create.o \
	build/Ledger_mempool.o \
	build/Ledger_difficulty.o \
	build/Ledger_checkpoints.o \
	build/Ledger_chainstate.o \
	build/Ledger_transaction.o \
	build/Ledger_tritium.o \
	build/Ledger_trustkey.o \
	build/Register_verify.o \
	build/Register_rollback.o \
	build/Operation_write.o \
	build/Operation_append.o \
	build/Operation_register.o \
	build/Operation_transfer.o \
	build/Operation_debit.o \
	build/Operation_credit.o \
	build/Operation_coinbase.o \
	build/Operation_trust.o \
	build/Operation_authorize.o \
	build/API_cmd.o \
	build/API_RPC_account.o \
	build/API_RPC_daemon.o \
	build/API_RPC_info.o \
	build/API_RPC_network.o \
	build/API_RPC_rpc.o \
	build/API_RPC_wallet.o \
	build/API_accounts_accounts.o \
	build/API_accounts_create.o \
	build/API_accounts_login.o \
	build/API_supply_supply.o \
	build/API_ledger_create.o \
	build/Legacy_evaluate.o \
	build/Legacy_address.o \
	build/Legacy_addressbook.o \
	build/Legacy_basickeystore.o \
	build/Legacy_crypted.o \
	build/Legacy_crypter.o \
	build/Legacy_cryptokeystore.o \
	build/Legacy_db.o \
	build/Legacy_enum.o \
	build/Legacy_evaluate.o \
	build/Legacy_keypool.o \
	build/Legacy_keystore.o \
	build/Legacy_mempool.o \
	build/Legacy_merkle.o \
	build/Legacy_outpoint.o \
	build/Legacy_reservekey.o \
	build/Legacy_script.o \
	build/Legacy_secret.o \
	build/Legacy_signature.o \
	build/Legacy_transaction.o \
	build/Legacy_txin.o \
	build/Legacy_txout.o \
	build/Legacy_wallet.o \
	build/Legacy_walletdb.o \
	build/Legacy_wallettx.o \
	build/Util_args.o \
	build/Util_base58.o \
	build/Util_base64.o \
	build/Util_config.o \
	build/Util_debug.o \
	build/Util_filesystem.o \
	build/Util_version.o

###############################################################################
ifeq ($(detected_OS),Windows)

#Configure OS Specific Compiler Output
ifndef VERBOSE
	CXX= @echo Compiling $< && g++
else
	CXX= g++
endif

#Configure OS Specific Build Environment
LIBS+= -l kernel32 \
	-l user32 \
	-l gdi32 \
	-l comdlg32 \
	-l winspool \
	-l winmm \
	-l shell32 \
	-l comctl32 \
	-l ole32 \
	-l oleaut32 \
	-l uuid \
	-l rpcrt4 \
	-l advapi32 \
	-l ws2_32 \
	-l shlwapi
DEFS+= -DWIN32 \
	-D_WINDOWS

#OS Specific Compiler Flags
CXXFLAGS+= -mthreads \
	-static \
	-static-libgcc \
	-static-libstdc++ \
	$(OPTIMIZATION) \
	$(DEBUG) \
	$(DEFS) \
	$(INCLUDEPATHS)

#set -std=c++ for all but c compiling
CFLAGS:= $(CXXFLAGS)
CXXFLAGS+=-std=c++11

#OS Specific Targets and instructions
all: release/nexus.exe

build/%.o: ./src/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/LLC_%.o: ./src/LLC/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/LLC_%.o: ./src/LLC/hash/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/LLC_%.o: ./src/LLC/hash/SK/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/LLC_%.o: ./src/LLC/hash/SK/%.c $(HEADERS)
	$(CXX) -c $(CFLAGS) -x c -o $@ $<

build/LLD_%.o: ./src/LLD/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/LLP_%.o: ./src/LLP/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/API_%.o: ./src/TAO/API/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/API_accounts_%.o: ./src/TAO/API/accounts/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/API_supply_%.o: ./src/TAO/API/supply/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/API_ledger_%.o: ./src/TAO/API/ledger/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/API_RPC_%.o: ./src/TAO/API/RPC/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/Legacy_%.o: ./src/Legacy/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/Ledger_%.o: ./src/TAO/Ledger/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/Operation_%.o: ./src/TAO/Operation/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/Register_%.o: ./src/TAO/Register/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

build/Util_%.o: ./src/Util/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

release/nexus.exe: $(OBJS:build/%=build/%)
	$(CXX) $(CXXFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)
	@echo " "
	@echo Finished building nexus.exe
	@echo " "

clean:
	-rm -f release\nexus.exe
	-rm -f build/*.o
	-rm -f build/*.P
	-rm -f src/build.h

endif
###############################################################################
ifeq ($(detected_OS),OSX)

#Configure OS Specific Compiler Output
ifndef VERBOSE
	CXX= @echo Compiling $< && llvm-g++
else
	CXX= llvm-g++
endif

#Configure OS Specific Build Environment
DEFS+= -DMAC_OSX \
	-DMSG_NOSIGNAL=0
LIBS+= $(BDB_LIB_PATH)/libdb_cxx.a \
	$(OPENSSL_LIB_PATH)/libssl.a \
	$(OPENSSL_LIB_PATH)/libcrypto.a



#OS Specific Compiler Flags
CXXFLAGS+= -mmacosx-version-min=10.10 \
	-O3 \
	$(DEFS) \
	$(DEBUG) \
	$(INCLUDEPATHS)

#set -std=c++ for all but c compiling
CFLAGS:= $(CXXFLAGS)
CXXFLAGS+=-std=c++11

#OS Specific Targets and instructions
all: nexus

build/%.o: src/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/hash/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/hash/SK/%.c $(HEADERS)
	$(CXX) -c $(CFLAGS) -x c -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/hash/SK/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLD_%.o: src/LLD/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLP_%.o: src/LLP/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_%.o: src/TAO/API/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_accounts_%.o: src/TAO/API/accounts/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_supply_%.o: src/TAO/API/supply/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_ledger_%.o: src/TAO/API/ledger/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_RPC_%.o: src/TAO/API/RPC/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Legacy_%.o: src/Legacy/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Ledger_%.o: src/TAO/Ledger/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Operation_%.o: src/TAO/Operation/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Register_%.o: src/TAO/Register/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Util_%.o: src/Util/%.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

nexus: $(OBJS:build/%=build/%)
	$(CXX) $(CXXFLAGS) -dead_strip -o $@ $(LIBPATHS) $^ $(LIBS)
	@echo ' '
	@echo Finished building nexus
	@echo ' '

clean:
	-rm -f nexus
	-rm -f build/*.o
	-rm -f build/*.P
	-rm -f src/build.h

endif
###############################################################################
ifeq ($(detected_OS),Linux)

#Configure OS Specific Compiler Output
ifndef VERBOSE
CXX= @echo Compiling $< && g++
else
CXX= g++
endif

#Configure OS Specific Build Environment
LIBS+= -Wl,-Bdynamic \
	-ldl \
	-lpthread

#Arch Linux Fix
ifeq ($(shell uname -r | grep -o ....$), ARCH)
	TMPLIBS := $(LIBS)
	LIBS= $(filter-out -lssl -lcrypto,$(TMPLIBS))
	LIBS+= /usr/lib/openssl-1.0/libssl.so \
		/usr/lib/openssl-1.0/libcrypto.so
endif

#OS Specific Compiler Flags
CXXFLAGS+= -O3 \
	-pthread \
	-fstack-protector \
	-D_FORTIFY_SOURCE=2 \
	-Wl,-z,relro \
	-Wl,-z,now \
	$(DEBUG) \
	$(DEFS) \
	$(INCLUDEPATHS)

#set -std=c++ for all but c compiling
CFLAGS:= $(CXXFLAGS)
CXXFLAGS+=-std=c++11

#OS Specific Targets and instructions
all: nexus

build/%.o: src/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/hash/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/hash/SK/%.c $(HEADERS)
	$(CXX) -c $(CFLAGS) -x c -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLC_%.o: src/LLC/hash/SK/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLD_%.o: src/LLD/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/LLP_%.o: src/LLP/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_%.o: src/TAO/API/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_accounts_%.o: src/TAO/API/accounts/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_supply_%.o: src/TAO/API/supply/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_ledger_%.o: src/TAO/API/ledger/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/API_RPC_%.o: src/TAO/API/RPC/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Legacy_%.o: src/Legacy/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Ledger_%.o: src/TAO/Ledger/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Operation_%.o: src/TAO/Operation/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Register_%.o: src/TAO/Register/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

build/Util_%.o: src/Util/%.cpp
	$(CXX) -c $(CXXFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)


nexus: $(OBJS:obj/%=build/%)
	$(CXX) $(CXXFLAGS) -rdynamic -o $@ $^ $(LDFLAGS) $(LIBS)
	@echo ' '
	@echo Finished building nexus
	@echo ' '

clean:
	-rm -f nexus
	-rm -f build/*.o
	-rm -f build/*.P
	-rm -f src/build.h

endif
###############################################################################
